/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface BattleshipInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BOARD_SIZE"
      | "attack"
      | "currentPlayer"
      | "eip712Domain"
      | "gameEnded"
      | "gameReady"
      | "placeShips"
      | "player1"
      | "player1Board"
      | "player1Ready"
      | "player1ShipsHit"
      | "player2"
      | "player2Board"
      | "player2Ready"
      | "player2ShipsHit"
      | "winner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Attack" | "EIP712DomainChanged" | "GameEnded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BOARD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attack",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPlayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameEnded", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameReady", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeShips",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "player1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "player1Board",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "player1Ready",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "player1ShipsHit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "player2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "player2Board",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "player2Ready",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "player2ShipsHit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BOARD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameEnded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameReady", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeShips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "player1Board",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "player1Ready",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "player1ShipsHit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "player2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "player2Board",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "player2Ready",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "player2ShipsHit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
}

export namespace AttackEvent {
  export type InputTuple = [
    x: BigNumberish,
    y: BigNumberish,
    victim: AddressLike,
    hit: boolean
  ];
  export type OutputTuple = [
    x: bigint,
    y: bigint,
    victim: string,
    hit: boolean
  ];
  export interface OutputObject {
    x: bigint;
    y: bigint;
    victim: string;
    hit: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [winner: AddressLike];
  export type OutputTuple = [winner: string];
  export interface OutputObject {
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Battleship extends BaseContract {
  connect(runner?: ContractRunner | null): Battleship;
  waitForDeployment(): Promise<this>;

  interface: BattleshipInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BOARD_SIZE: TypedContractMethod<[], [bigint], "view">;

  attack: TypedContractMethod<
    [_x: BigNumberish, _y: BigNumberish],
    [void],
    "nonpayable"
  >;

  currentPlayer: TypedContractMethod<[], [string], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  gameEnded: TypedContractMethod<[], [boolean], "view">;

  gameReady: TypedContractMethod<[], [boolean], "view">;

  placeShips: TypedContractMethod<
    [encryptedValue: BytesLike],
    [void],
    "nonpayable"
  >;

  player1: TypedContractMethod<[], [string], "view">;

  player1Board: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  player1Ready: TypedContractMethod<[], [boolean], "view">;

  player1ShipsHit: TypedContractMethod<[], [bigint], "view">;

  player2: TypedContractMethod<[], [string], "view">;

  player2Board: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  player2Ready: TypedContractMethod<[], [boolean], "view">;

  player2ShipsHit: TypedContractMethod<[], [bigint], "view">;

  winner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BOARD_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "attack"
  ): TypedContractMethod<
    [_x: BigNumberish, _y: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentPlayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameEnded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "gameReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "placeShips"
  ): TypedContractMethod<[encryptedValue: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "player1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "player1Board"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "player1Ready"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "player1ShipsHit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "player2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "player2Board"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "player2Ready"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "player2ShipsHit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Attack"
  ): TypedContractEvent<
    AttackEvent.InputTuple,
    AttackEvent.OutputTuple,
    AttackEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;

  filters: {
    "Attack(uint8,uint8,address,bool)": TypedContractEvent<
      AttackEvent.InputTuple,
      AttackEvent.OutputTuple,
      AttackEvent.OutputObject
    >;
    Attack: TypedContractEvent<
      AttackEvent.InputTuple,
      AttackEvent.OutputTuple,
      AttackEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "GameEnded(address)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
  };
}
